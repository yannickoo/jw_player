<?php
/**
 * @file
 * Adds a theme function which allows theme developers to use the JW Player.
 */

/**
 * Implements hook_theme().
 */
function jw_player_theme() {
  return array(
    'jw_player' => array(
      'variables' => array(
        'preset' => '',
        'file_url' => '',
        'file_mime' => '',
        'file' => NULL,
        'item' => NULL,
        'options' => array(),
        'html_id' => '',
      ),
      'file' => 'jw_player.field.inc',
      'template' => 'jw_player',
    ),
  );
}


/**
 * Returns the default settings for JW Player. Used in cases where a preset is
 * not provided when the JW Player theme function is called.
 */
function jw_player_default_settings() {
  $defaults = &drupal_static(__FUNCTION__);

  if (!isset($defaults)) {
    $defaults = array(
      'width' => '640',
      'height' => '480',
      'mode' => 'html5',
      'autoplay' => FALSE,
      'controlbar' => 'bottom',
      'base' => file_create_url(libraries_get_path('jwplayer') . '/'),
    );
  }
  return $defaults;
}

/**
 * Retrieves all available preset plugins.
 */
function jw_player_preset_plugins($name = NULL) {
  $plugins = &drupal_static(__FUNCTION__);

  if (!isset($plugins)) {
    $plugins =  \Drupal::moduleHandler()->invokeAll('jw_player_plugin_info');
    // Allow modules to alter other modules' plugin definitions
    \Drupal::moduleHandler()->alter('jw_player_plugin_info', $plugins);
  }

  if ($name && isset($plugins[$name])) {
    return $plugins[$name];
  }

  return $plugins;
}

/**
 * Retrieves all available skins.
 */
function jw_player_skins($name = NULL) {
  $skins = &drupal_static(__FUNCTION__);

  if (!isset($skins)) {
    $directory = libraries_get_path('jwplayer_skins');
    $skins = file_scan_directory($directory, '/\.xml|\.swf$/');
  }

  if ($name) {
    foreach ($skins as $file) {
      if ($file->name == $name) {
        return $file;
      }
    }
  }
  return $skins;
}

/**
 * Implements hook_libraries_info().
 */
function jw_player_libraries_info() {
  $libraries = array(
    'jwplayer' => array(
      'name' => 'JW Player',
      'vendor url' => 'http://www.jwplayer.com/',
      'download url' => 'http://www.jwplayer.com/download',
      'version arguments' => array(
        'file' => 'jwplayer.js',
        'pattern' => '/jwplayer.version="(.*?)"/',
        'lines' => 1,
      ),
      'files' => array(
        'js' => array(
          'jwplayer.js' => array(),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function jw_player_library_info_alter(&$libraries, $extension) {
  if ($extension != 'jw_player') {
    return;
  }
  $info = libraries_detect('jwplayer');
  $libraries['jwplayer'] += array(
    'website' => $info['vendor url'],
    'version' => $info['installed'] ? $info['version'] : 'cloud-hosted',
  );

  $config = \Drupal::config('jw_player.settings');
  if ($info['installed']) {
    // Self hosted player, use files from library definition.
    if (!empty($info['files']['js'])) {
      foreach ($info['files']['js'] as $data => $option) {

        if (is_numeric($data)) {
          $option = "/{$info['library path']}/{$option}";
        }
        elseif (empty($option['type']) || $option['type'] == 'file') {
          $data = "/{$info['library path']}/{$data}";
        }

        $libraries['jwplayer']['js'][$data] = $option;
      }
    }
  }
  elseif ($account_token = $config->get('account_token')) {
    // Cloud hosted player, use external JavaScript.
    $libraries['jwplayer']['js']["//jwpsrv.com/library/{$account_token}.js"] = array(
      'type' => 'external',
    );
  }
  if ($key = $config->get('license_key')) {
    $libraries['jwplayer']['js']['jwplayer.key=' . json_encode($key)] = array(
      'type' => 'inline',
      'scope' => 'header',
      'weight' => 5,
    );
  }
  // Use integration files from library definition.
  foreach ($info['integration files'] as $module => $files) {
    foreach (array_keys($files) as $type) {
      $module_path = drupal_get_path('module', $module);
      foreach ($files[$type] as $data => $option) {
        if (is_numeric($data)) {
          $option = "{$module_path}/{$option}";
        }
        elseif (empty($option['type']) || $option['type'] == 'file') {
          $data = "{$module_path}/{$data}";
        }
        $libraries['jwplayer'][$type][$data] = $option;
      }
    }
  }
  return $libraries;
}
